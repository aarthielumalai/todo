{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["i","App","useState","list","setList","input","setInput","id","onSubmit","e","preventDefault","txt","type","placeholder","value","onChange","target","map","l","class","onClick","newList","filter","deleteListItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sLAGIA,G,MAAI,GAyCOC,EAvCH,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACPC,EADO,KACFC,EADE,OAEWF,mBAAS,IAFpB,mBAEPG,EAFO,KAEDC,EAFC,KAiBd,OACG,gCACG,iCACE,oBAAIC,GAAG,KAAP,8BAEF,sBAAKA,GAAG,UAAR,UAEE,sBAAMC,SAjBM,SAACC,GAClBA,EAAEC,iBACFN,EAAQ,GAAD,mBAAKD,GAAL,CAAUE,KACjBC,EAAS,2BAAID,GAAL,IAAWM,IAAI,OAclB,SACI,uBAAOJ,GAAG,QAAQK,KAAK,OAAOC,YAAY,iBAAiBC,MAAOT,EAAMM,IAAKI,SAtBxE,SAACN,GACfH,EAAS,CAACC,GAAGP,EAAEW,IAAIF,EAAEO,OAAOF,QAC5Bd,GAAK,OAuBCG,EAAKc,KAAI,SAACC,GAAD,OACN,qBAAKC,MAAM,UAAX,SACI,8BAAID,EAAEP,IAAI,wBAAQS,QAAS,kBAjBpB,SAACb,EAAGE,GACxB,IAAMY,EAAUlB,EAAKmB,QAAO,SAAAJ,GAAC,OAAIA,EAAEX,KAAKA,KACxCH,EAAQiB,GAesCE,CAAeL,EAAEX,KAAxC,mBADcW,EAAEX,cCtB/BiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCQdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.72c2b375.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nlet i = 0;\n//npm and node\nconst App = () => {\n    const [list,setList] = useState([]);\n    const [input,setInput] = useState({});\n    const getInput = (e) => {\n       setInput({id:i,txt:e.target.value});\n       i += 1;\n    }\n    const getListItem = (e) => {\n       e.preventDefault();\n       setList([...list,input])\n       setInput({...input,txt:''});\n    } \n \n    const deleteListItem = (id,e) => {\n       const newList = list.filter(l => l.id!==id);\n       setList(newList);\n    }\n    return(\n       <div>\n          <header>\n            <h1 id='h1'>To-do List App</h1>\n          </header>\n          <div id='mainApp'>\n            {/*Form*/}\n            <form onSubmit={getListItem} >\n                <input id='input' type='text' placeholder='Type list item' value={input.txt} onChange={getInput} />\n            </form>\n            {/*Items*/}\n            {list.map((l) => (\n                <div class='listDiv' key = {l.id}>\n                    <p>{l.txt}<button onClick={() => deleteListItem(l.id)}>X</button></p>\n                </div>\n            ))}\n          </div>\n          \n       </div>  \n    )\n }\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//Reducer - state immutable \n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import { createStore } from 'redux';\n//import rootReducer from './reducer/rootReducer.js';\n\n\n//const store = createStore(rootReducer);\n\n//console.log(store.getState());\n\nReactDOM.render(<App /> ,document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}